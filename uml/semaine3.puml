@startuml

class Main
{
    + {static} main(args : String[*])
}

package "Affichage" #DDDDDD {

class AffichagePlateau
{
- m_carte : String
- m_separation : String {read only}
- m_affichage : String
- m_tour : Integer
+ <<Create>> Plateau()
+ afficherPlateau(J1 : Joueur, J2 : Joueur) : String
+ afficherCarte(j : Joueur) : String
+ afficherMain(j : Joueur) : String
+ creationEspacement(textRef : Integer, textMid : Integer) : String
+ separation(j : Joueur) : String
+ PertePokemon(j : Joueur) : String
+ ajouterTour()
}

class AffichagePouvoirs
{
+ {static} demandeEffet(p : Power)
+ {static} autorisationUtilisation()
+ {static} afficherResultatAction(texte : String)
}

}

package "Players" #DDDDDD {

class Ordinateur
{
+ <<Create>> Ordinateur(pseudo: String, ordrePassage: Boolean)
+ <<Create>> Ordinateur(ordrePassage: Boolean)
+ placerPokemon() {redefines}
+ attaquePokemon(adversaire : Joueur)
- getPokemonsPvMin(listeDep: Pokemon[*]): Pokemon[*]
- recuperePokemonsAvantageux(ttPokemonsAdverses : Pokemon[*], monElement : Element): Pokemon[*]
- getPokemonsAvecElement(pokemonsAttaques : Pokemon[*], elementVoulu : String  ): Pokemon[*]
}

class Joueur
{
# m_commence : Boolean
# m_pseudo : String
+ <<Create>> Joueur(pseudo: String, commence: Boolean)
+ piocher()
+ placerPokemon()
+ attaquePokemon(adversaire : Joueur)
+ perdPokemon(p : Pokemon)
+ aPerdu()
+ utiliserPouvoir(pokemon : Pokemon, adv : Joueur)
# bougerPokemon(nom : String, depart : Pokemon[*], arrivee : Pokemon[*])
# pokemonExiste(nom : String, liste : Pokemon[*] : Boolean
- choisirPokemon(liste : Pokemon[*] ): String
- listeChoixPoke(liste : Pokemon[*] ): String
}
}

package "Gestion_Jeu" #DDDDDD {
class Gestion_Tour
{
    + {static} miseEnPlace(joueur1 : Joueur, joueur2 : Joueur, plateau : Plateau)
    + {static} tourSuivant(joueur1 : Joueur, joueur2 : Joueur, plateau : Plateau)
    + {static} affichageFin(joueur Joueur)

}
}
package "Create_Pokemon" #DDDDDD {

abstract class Power{
    # m_nom : String
    # m_estUtilisable- : Boolean
    + getNom(): String
    + utiliserPouvoir(soi : Joueur, adv : Joueur)
    - autorisationUtilisation(): Boolean
    # {abstract} declencherPouvoir(soi : Joueur, adv : Joueur)
}

class Berserk extends Power{
    # "Creates" Berserk()
    # declencherPouvoir(soi : Joueur, adv : Joueur) {redefines}
}

class Kamikaze extends Power{
    # "Creates" Kamikaze(possesseur : Pokemon))
    # declencherPouvoir(soi : Joueur, adv : Joueur) {redefines}
}

class SoinSimple extends Power{
    # "Creates" SoinSimple()
    # declencherPouvoir(soi : Joueur, adv : Joueur) {redefines}
}

class SoinZone extends Power{
    # "Creates" SoinZone()
    # declencherPouvoir(soi : Joueur, adv : Joueur) {redefines}
}

class Usurpation extends Power{
    # "Creates" Usurpation(possesseur : Pokemon)
    # declencherPouvoir(soi : Joueur, adv : Joueur) {redefines}
}

class Pokemon
{
~ m_nom : String
~ m_pv : Integer
~ m_pvMax : Integer
~ m_attaque : Integer
~ m_element : Element
+ <<Create>> Pokemon()
+ getNom() : String
+ getElement() : Element
+ getAttaque() : Integer
+ getPV() : Integer
+ getPVMax() : Integer
+ getPower() : Power
+ attaque(autre : Pokemon)
+ possedePouvoir():Boolean
+ toString() : String {redefines}
~ estSoigne(soin : Integer)
}


class Initialisation
{
- {static} m_listeNoms : String[*]
- {static} m_listePouvoirs ! String[8]
~ {static} getNom() : String
~ {static} getPouvoir() : String
}

class Element
{
# m_avantage : String
# m_desavantage : String
# m_nom : String
+ <<Create>> Element (nom : String)
+ getElement() : String
+ getAvantage() : String
}

}


Joueur "*" *----> "# m_terrain[*] 1" Pokemon
Joueur "*" *----> "# m_pioche[*] 1" Pokemon
Joueur "*" *----> "# m_main[*] 1" Pokemon
Joueur "*" *----> "# m_defausse[*] 1" Pokemon

Pokemon o-> "1\n-m_element" Element : a une affinité avec  >
Pokemon *-> "0-1\n~ m_pouvoir" Power : peut utiliser >
Kamikaze o--> "0-1\n- m_possesseur {read only}" Pokemon : est utilisé par>
Berserk o--> "0-1\n- m_receveur" Pokemon : est utilisé par>
Usurpation o--> "0-1\n- m_possesseur {read only}" Pokemon : est utilisé par>

Ordinateur --|> Joueur
AffichagePlateau ..> Joueur : <<calls>>
Main ..> Joueur :<<uses>>
Main ..> Gestion_Tour :<<calls>>
Gestion_Tour ..> Joueur :<<calls>>
Gestion_Tour ..> AffichagePlateau :<<calls>>
Pokemon ..> Initialisation : <<uses>>
Power ..> AffichagePouvoirs :<<calls>>

@enduml